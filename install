#!/usr/bin/env bash

CWD=$(pwd)  # Current working directory.
GUM_PKG_NAME="community/gum"
GUM_REPO_URL="https://github.com/charmbracelet/gum"
PARU_AUR_URL="https://aur.archlinux.org/paru.git"
PARU_REPO_URL="https://github.com/Morganamilo/paru"

# Show message with prefix.
#
# :param $1: Message type (0 - info, 1 - warning, 2 - error)
# :param $2: The message to show.
showMessage() {
    if [[ $1 -eq 0 ]]; then echo "[i] $2"
    elif [[ $1 -eq 1 ]]; then echo "[!] $2"
    elif [[ $1 -eq 2 ]]; then echo "[E] $2"
    fi
}

# Check if the script is running as root.
checkRoot() {
    if [[ "$EUID" -eq 0 ]]; then
        showMessage 2 "This script should not be run as root."
        exit 1
    fi
}

# Check if sudo is installed.
checkSudoInstallation() {
    if [[ ! -x $(command -v sudo) ]]; then
        showMessage 2 "\`sudo\` is not installed. Please install it manually."
        exit 1
    fi
}

# Check if gum is installed.
checkGumInstallation() {
    if [[ ! -x $(command -v gum) ]]; then
        showMessage 1 "\`gum\` is not installed. Trying to install it..."
        echo
        if ! sudo pacman -S "$GUM_PKG_NAME"; then
            echo
            showMessage 2 "\`gum\` installation failed. Please install it manually."
            echo
            echo "More Information: $GUM_REPO_URL"
            echo
            exit 2
        fi
    fi
}

# Check if paru is installed. This function requires `gum` to be installed.
checkParuInstallation() {
    if [[ ! -x $(command -v parus) ]]; then
        if gum confirm "Do you want to install paru?"; then
            {
                # FIXME: Still continues even if pacman fails.
                # paru dependencies.
                sudo pacman -S --needed git base-devel
                # Make a temporary directory.
                paru_tmpdir=$(mktemp -d)
                cd "$paru_tmpdir"
                git clone "$PARU_AUR_URL" "$paru_tmpdir/paru"
                cd "$paru_tmpdir/paru"
                makepkg -si
                cd "$CWD"
            } || {
                showMessage 2 "Failed to install paru. Please manually install it."
                echo
                echo "More Information: $PARU_REPO_URL"
                exit 3
            }
        else
            showMessage 2 "paru is required to install AUR packages. Please install it manually."
            echo
            echo "More Information: $PARU_REPO_URL"
            exit 4
        fi
    fi
}

main() {
    showMessage 0 "Checking prerequisites..."
    echo

    checkRoot
    checkSudoInstallation
    checkGumInstallation

    checkParuInstallation

    showMessage 0 "Prerequisites are met. Now installing..."
}

main  # Run main function.
