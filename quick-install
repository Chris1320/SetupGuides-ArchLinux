#!/usr/bin/env bash

color_info=$(tput setaf 10)
color_warning=$(tput setaf 11)
color_error=$(tput setaf 9)
style_bold=$(tput bold)
style_reset=$(tput sgr0)

echo "[E] ${color_error}This script is deprecated!${style_reset}"

DOTFILES_PATH="$PWD/dotfiles"

SCRIPTS_PATH="$PWD/scripts"
SCRIPTS_DST_PATH="$HOME/.config/scripts"

ASSETS_PATH="$PWD/assets"
WALLPAPERS_PATH="$ASSETS_PATH/wallpapers"
WALLPAPERS_DST_PATH="/usr/share/wallpapers"
PROMPT_CONFIRMATION_TIMEOUT=30 # timeout in seconds

failed_operations_num=0

# Create the directory if it does not exist.
#
# :param $1: The directory name
checkDir() {
    if [ ! -d "$1" ]; then
        printf "\tCreating directory \"%s\"\n" "$1"
        if ! mkdir -p "$1" >/dev/null 2>&1; then
            sudo mkdir -p "$1"
        fi
    fi
}

# Inform the user on what's about to happen.
confirmQuickInstall() {
    echo "[!] ${color_warning}Check the content of this script first before proceeding!${style_reset}"
    echo
    printf "\tThis will **%sCOPY ALL DOTFILES%s** to their respective locations,\n" "$style_bold" "$style_reset"
    printf "\tpotentially overwriting existing dotfiles in your system.\n"
    echo
    while true; do
        read -rp "Do you want to continue (y/N)? > " -t $PROMPT_CONFIRMATION_TIMEOUT quick_install_confirmation
        if [[ "${quick_install_confirmation}" == "" || "${quick_install_confirmation}" =~ ^[n|N].* ]]; then
            printf "\n%sInstallation cancelled.%s\n" "$color_error" "$style_reset"
            exit 1
        elif [[ "${quick_install_confirmation}" =~ ^[y|Y].* ]]; then
            break
        fi
    done
}

# Perform a simple copy of the dotfiles to the target directory.
#
# :param $1: Dotfile name
# :param $2: Source path
# :param $3: Target path
simpleDotfileInstall() {
    # ? Give the parameters a reasonable name.
    name="$1"
    src_path="$2"
    dst_path="$3"
    dotfile_is_file=false # determine if src_path is a file or directory
    if [[ -f $src_path ]]; then
        dotfile_is_file=true
    fi

    echo "[+] ${color_info}Installing $name dotfiles...${style_reset}"
    if $dotfile_is_file; then
        checkDir "$(dirname "$dst_path")"
        if [[ -f $dst_path ]]; then
            printf "\tOverwriting existing file \"%s\"...\n" "$dst_path"
        fi
        if ! cp "$src_path" "$dst_path" >/dev/null 2>&1; then
            echo "[!] ${color_warning}Retrying copy with sudo...${style_reset}"
            if ! sudo cp "$src_path" "$dst_path"; then
                echo "[E] ${color_error} Failed to copy $name dotfiles.${style_reset}"
                declare -g failed_operations_num=$((failed_operations_num + 1))
            fi
        fi

    else
        if [[ -d $dst_path ]]; then
            printf "\tRemoving existing directory \"%s\"...\n" "$dst_path"
            if ! rm -rf "$dst_path" >/dev/null 2>&1; then
                sudo rm -rf "$dst_path"
            fi

        fi
        checkDir "$(dirname "$dst_path")"
        if ! cp -r "$src_path" "$dst_path" >/dev/null 2>&1; then
            echo "[!] ${color_warning}Retrying copy with sudo...${style_reset}"
            if ! sudo cp -r "$src_path" "$dst_path"; then
                echo "[E] ${color_error} Failed to copy $name dotfiles.${style_reset}"
                declare -g failed_operations_num=$((failed_operations_num + 1))
            fi
        fi
    fi
}

main() {
    confirmQuickInstall

    echo
    echo "[i] ${color_info}Copying dotfiles...${style_reset}"
    echo "[+] ${color_info}Checking .config directory${style_reset}"
    checkDir "$HOME/.config" # create .config if it does not exist

    simpleDotfileInstall "btop" "$DOTFILES_PATH/btop" "$HOME/.config/btop"
    simpleDotfileInstall "cava" "$DOTFILES_PATH/cava/config" "$HOME/.config/cava/config"
    simpleDotfileInstall "dunst" "$DOTFILES_PATH/dunst/dunstrc" "$HOME/.config/dunst/dunstrc"
    #simpleDotfileInstall "eww" "$DOTFILES_PATH/eww" "$HOME/.config/eww"
    simpleDotfileInstall "Hyprland" "$DOTFILES_PATH/hypr" "$HOME/.config/hypr"
    simpleDotfileInstall "Kitty" "$DOTFILES_PATH/kitty/kitty.conf" "$HOME/.config/kitty/kitty.conf"
    # NOTE: do not delete mpd's directory; it contains the database and other user data
    # FIXME: Move the mpd directory to a different location.
    simpleDotfileInstall "mpd" "$DOTFILES_PATH/mpd/mpd.conf" "$HOME/.config/mpd/mpd.conf"
    simpleDotfileInstall "ncmpcpp" "$DOTFILES_PATH/ncmpcpp/config" "$HOME/.config/ncmpcpp/config"
    simpleDotfileInstall "networkmanager-dmenu" "$DOTFILES_PATH/networkmanager-dmenu/config.ini" "$HOME/.config/networkmanager-dmenu/config.ini"
    simpleDotfileInstall "rofi (default)" "$DOTFILES_PATH/rofi/config.rasi" "$HOME/.config/rofi/config.rasi"
    simpleDotfileInstall "rofi (custom)" "$DOTFILES_PATH/rofi/config" "$HOME/.config/rofi/config"
    simpleDotfileInstall "SDDM (config)" "$DOTFILES_PATH/sddm/sddm.conf" "/etc/sddm.conf.d/sddm.conf"
    simpleDotfileInstall "SDDM (theme)" "$DOTFILES_PATH/sddm/sddm-catppuccin-theme/src/catppuccin-mocha" "/usr/share/sddm/themes/catppuccin-mocha"
    simpleDotfileInstall "SDDM (custom)" "$DOTFILES_PATH/sddm/custom-theme.conf" "/usr/share/sddm/themes/catppuccin-mocha/theme.conf"
    simpleDotfileInstall "swappy" "$DOTFILES_PATH/swappy/config" "$HOME/.config/swappy/config"
    simpleDotfileInstall "swaylock" "$DOTFILES_PATH/swaylock" "$HOME/.config/swaylock"
    simpleDotfileInstall "tmux" "$DOTFILES_PATH/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"
    simpleDotfileInstall "waybar" "$DOTFILES_PATH/waybar" "$HOME/.config/waybar"
    simpleDotfileInstall "wlogout" "$DOTFILES_PATH/wlogout" "$HOME/.config/wlogout"
    # simpleDotfileInstall "wofi" "$DOTFILES_PATH/wofi" "$HOME/.config/wofi"
    simpleDotfileInstall "zathura" "$DOTFILES_PATH/zathura" "$HOME/.config/zathura"

    echo "[i] ${color_info}Copying dotfiles... Done!${style_reset}"
    echo
    echo "[i] ${color_info}Copying scripts...${style_reset}"
    if [[ -d $SCRIPTS_DST_PATH ]]; then
        printf "\tRemoving existing %s directory...\n" "$SCRIPTS_DST_PATH"
        rm -r "$SCRIPTS_DST_PATH"
    fi
    if cp -r "$SCRIPTS_PATH" "$SCRIPTS_DST_PATH"; then
        echo "[i] ${color_info}Copying scripts... Done!${style_reset}"
    else
        echo "[E] ${color_error} Failed to copy scripts.${style_reset}"
        declare -g failed_operations_num=$((failed_operations_num + 1))
    fi

    echo "[i] ${color_info}Copying wallpapers...${style_reset}"
    if [[ -d $WALLPAPERS_DST_PATH ]]; then
        printf "\tRemoving existing %s directory...\n" "$WALLPAPERS_DST_PATH"
        sudo rm -r "$WALLPAPERS_DST_PATH" # FIX: Should we NOT remove the directory?
    fi
    if sudo cp -r "$WALLPAPERS_PATH" "$WALLPAPERS_DST_PATH"; then
        echo "[i] ${color_info}Copying wallpapers... Done!${style_reset}"
    else
        echo "[E] ${color_error} Failed to copy wallpapers.${style_reset}"
        declare -g failed_operations_num=$((failed_operations_num + 1))
    fi

    if [[ $failed_operations_num -eq 1 ]]; then
        echo "[!] ${color_warning}There was ${color_error}1${color_warning} failed operation.${style_reset}"
    elif [[ $failed_operations_num -gt 1 ]]; then
        echo "[!] ${color_warning}There were ${color_error}$failed_operations_num${color_warning} failed operations.${style_reset}"
    fi

    exit $failed_operations_num
}

main
